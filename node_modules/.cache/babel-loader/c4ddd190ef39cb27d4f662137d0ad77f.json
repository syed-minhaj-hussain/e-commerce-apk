{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Documents\\\\GitHub\\\\e-commerce-apk\\\\src\\\\context\\\\AuthContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nconst usersDB = {\n  data: [{\n    userName: \"Minhaj\",\n    password: \"Hussain\"\n  }, {\n    userName: \"Syed\",\n    password: \"Minhaj\"\n  }, {\n    userName: \"Neog\",\n    password: \"Camp\"\n  }, {\n    userName: \"Test\",\n    password: \"Success\"\n  }]\n};\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n\n  const [isUserLoggedIn, setIsUserLoggedIn] = useState(false);\n  const [users, setUsers] = useState(usersDB);\n  const navigate = useNavigate();\n  useEffect(() => {\n    setUsers(JSON.parse(localStorage.getItem(\"updatedUsers\")) || usersDB);\n  }, []);\n  useEffect(() => {\n    localStorage.setItem(\"updatedUsers\", JSON.stringify(users));\n  }, [users]);\n\n  const findUserByUserName = userName => {\n    var _users$data;\n\n    return users === null || users === void 0 ? void 0 : (_users$data = users.data) === null || _users$data === void 0 ? void 0 : _users$data.find(user => user.userName === userName);\n  };\n\n  const fakeFetch = (userName, password) => {\n    return new Promise((resolve, reject) => {\n      const user = findUserByUserName(userName);\n      setTimeout(() => {\n        if (user && user.password === password) {\n          resolve({\n            success: true,\n            msg: \"Auth Success\"\n          });\n        }\n\n        reject({\n          success: false,\n          msg: \"wrong username / password\"\n        });\n      }, 3000);\n    });\n  };\n\n  const login = async (username, password, route) => {\n    try {\n      const {\n        success\n      } = await fakeFetch(username, password);\n      console.log({\n        success\n      });\n\n      if (success === true) {\n        setIsUserLoggedIn(prev => !prev);\n        localStorage.setItem(\"loginStatus\", JSON.stringify({\n          status: true,\n          path: route\n        }));\n        navigate(route);\n      }\n\n      return {\n        success,\n        path: route\n      };\n    } catch (err) {\n      // console.log({ err });\n      return {\n        err\n      };\n    }\n  };\n\n  const logout = () => {\n    setIsUserLoggedIn(false);\n    localStorage.removeItem(\"loginStatus\");\n  };\n\n  const fetchRegister = userName => {\n    return new Promise((resolve, reject) => {\n      const user = findUserByUserName(userName);\n\n      if (user) {\n        reject({\n          success: false,\n          message: \"username already exists!\"\n        });\n      }\n\n      resolve({\n        success: true,\n        message: \"user added successfully!\"\n      });\n    });\n  };\n\n  const register = async (userName, password) => {\n    if (userName === \"\" || password === \"\") {\n      return {\n        success: false,\n        message: \"Input Fields are enpty!\"\n      };\n    }\n\n    try {\n      const response = await fetchRegister(userName);\n\n      if ((response === null || response === void 0 ? void 0 : response.success) && userName !== \"\" && password !== \"\") {\n        setUsers({ ...users,\n          data: [...users.data, {\n            userName,\n            password\n          }]\n        });\n        console.log({\n          response\n        });\n        return response;\n      }\n    } catch (err) {\n      console.log({\n        err\n      });\n      return err;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isUserLoggedIn,\n      setIsUserLoggedIn,\n      login,\n      logout,\n      register\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthProvider, \"LrB1KmbPLumMTCechGFU0Wuzv/M=\", false, function () {\n  return [useNavigate];\n});\n\n_c = AuthProvider;\nexport const useAuthContext = () => {\n  _s2();\n\n  return useContext(AuthContext);\n};\n\n_s2(useAuthContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["C:/Users/hp/Documents/GitHub/e-commerce-apk/src/context/AuthContext.js"],"names":["createContext","useContext","useEffect","useState","useNavigate","AuthContext","usersDB","data","userName","password","AuthProvider","children","isUserLoggedIn","setIsUserLoggedIn","users","setUsers","navigate","JSON","parse","localStorage","getItem","setItem","stringify","findUserByUserName","find","user","fakeFetch","Promise","resolve","reject","setTimeout","success","msg","login","username","route","console","log","prev","status","path","err","logout","removeItem","fetchRegister","message","register","response","useAuthContext"],"mappings":";;;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,SAApC,EAA+CC,QAA/C,QAA+D,OAA/D;AACA,SAASC,WAAT,QAA4B,cAA5B;;AAEA,MAAMC,WAAW,gBAAGL,aAAa,EAAjC;AACA,MAAMM,OAAO,GAAG;AACdC,EAAAA,IAAI,EAAE,CACJ;AACEC,IAAAA,QAAQ,EAAE,QADZ;AAEEC,IAAAA,QAAQ,EAAE;AAFZ,GADI,EAKJ;AACED,IAAAA,QAAQ,EAAE,MADZ;AAEEC,IAAAA,QAAQ,EAAE;AAFZ,GALI,EASJ;AACED,IAAAA,QAAQ,EAAE,MADZ;AAEEC,IAAAA,QAAQ,EAAE;AAFZ,GATI,EAaJ;AACED,IAAAA,QAAQ,EAAE,MADZ;AAEEC,IAAAA,QAAQ,EAAE;AAFZ,GAbI;AADQ,CAAhB;AAqBA,OAAO,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAC5C,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCV,QAAQ,CAAC,KAAD,CAApD;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAACG,OAAD,CAAlC;AACA,QAAMU,QAAQ,GAAGZ,WAAW,EAA5B;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,QAAQ,CAACE,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAX,KAAoDd,OAArD,CAAR;AACD,GAFQ,EAEN,EAFM,CAAT;AAGAJ,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,YAAY,CAACE,OAAb,CAAqB,cAArB,EAAqCJ,IAAI,CAACK,SAAL,CAAeR,KAAf,CAArC;AACD,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT;;AAIA,QAAMS,kBAAkB,GAAIf,QAAD;AAAA;;AAAA,WACzBM,KADyB,aACzBA,KADyB,sCACzBA,KAAK,CAAEP,IADkB,gDACzB,YAAaiB,IAAb,CAAmBC,IAAD,IAAUA,IAAI,CAACjB,QAAL,KAAkBA,QAA9C,CADyB;AAAA,GAA3B;;AAGA,QAAMkB,SAAS,GAAG,CAAClB,QAAD,EAAWC,QAAX,KAAwB;AACxC,WAAO,IAAIkB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,YAAMJ,IAAI,GAAGF,kBAAkB,CAACf,QAAD,CAA/B;AACAsB,MAAAA,UAAU,CAAC,MAAM;AACf,YAAIL,IAAI,IAAIA,IAAI,CAAChB,QAAL,KAAkBA,QAA9B,EAAwC;AACtCmB,UAAAA,OAAO,CAAC;AAAEG,YAAAA,OAAO,EAAE,IAAX;AAAiBC,YAAAA,GAAG,EAAE;AAAtB,WAAD,CAAP;AACD;;AACDH,QAAAA,MAAM,CAAC;AAAEE,UAAAA,OAAO,EAAE,KAAX;AAAkBC,UAAAA,GAAG,EAAE;AAAvB,SAAD,CAAN;AACD,OALS,EAKP,IALO,CAAV;AAMD,KARM,CAAP;AASD,GAVD;;AAYA,QAAMC,KAAK,GAAG,OAAOC,QAAP,EAAiBzB,QAAjB,EAA2B0B,KAA3B,KAAqC;AACjD,QAAI;AACF,YAAM;AAAEJ,QAAAA;AAAF,UAAc,MAAML,SAAS,CAACQ,QAAD,EAAWzB,QAAX,CAAnC;AAEA2B,MAAAA,OAAO,CAACC,GAAR,CAAY;AAAEN,QAAAA;AAAF,OAAZ;;AACA,UAAIA,OAAO,KAAK,IAAhB,EAAsB;AACpBlB,QAAAA,iBAAiB,CAAEyB,IAAD,IAAU,CAACA,IAAZ,CAAjB;AACAnB,QAAAA,YAAY,CAACE,OAAb,CACE,aADF,EAEEJ,IAAI,CAACK,SAAL,CAAe;AAAEiB,UAAAA,MAAM,EAAE,IAAV;AAAgBC,UAAAA,IAAI,EAAEL;AAAtB,SAAf,CAFF;AAIAnB,QAAAA,QAAQ,CAACmB,KAAD,CAAR;AACD;;AACD,aAAO;AAAEJ,QAAAA,OAAF;AAAWS,QAAAA,IAAI,EAAEL;AAAjB,OAAP;AACD,KAbD,CAaE,OAAOM,GAAP,EAAY;AACZ;AACA,aAAO;AAAEA,QAAAA;AAAF,OAAP;AACD;AACF,GAlBD;;AAoBA,QAAMC,MAAM,GAAG,MAAM;AACnB7B,IAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACAM,IAAAA,YAAY,CAACwB,UAAb,CAAwB,aAAxB;AACD,GAHD;;AAKA,QAAMC,aAAa,GAAIpC,QAAD,IAAc;AAClC,WAAO,IAAImB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,YAAMJ,IAAI,GAAGF,kBAAkB,CAACf,QAAD,CAA/B;;AACA,UAAIiB,IAAJ,EAAU;AACRI,QAAAA,MAAM,CAAC;AAAEE,UAAAA,OAAO,EAAE,KAAX;AAAkBc,UAAAA,OAAO,EAAE;AAA3B,SAAD,CAAN;AACD;;AACDjB,MAAAA,OAAO,CAAC;AAAEG,QAAAA,OAAO,EAAE,IAAX;AAAiBc,QAAAA,OAAO,EAAE;AAA1B,OAAD,CAAP;AACD,KANM,CAAP;AAOD,GARD;;AAUA,QAAMC,QAAQ,GAAG,OAAOtC,QAAP,EAAiBC,QAAjB,KAA8B;AAC7C,QAAID,QAAQ,KAAK,EAAb,IAAmBC,QAAQ,KAAK,EAApC,EAAwC;AACtC,aAAO;AAAEsB,QAAAA,OAAO,EAAE,KAAX;AAAkBc,QAAAA,OAAO,EAAE;AAA3B,OAAP;AACD;;AACD,QAAI;AACF,YAAME,QAAQ,GAAG,MAAMH,aAAa,CAACpC,QAAD,CAApC;;AACA,UAAI,CAAAuC,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEhB,OAAV,KAAqBvB,QAAQ,KAAK,EAAlC,IAAwCC,QAAQ,KAAK,EAAzD,EAA6D;AAC3DM,QAAAA,QAAQ,CAAC,EAAE,GAAGD,KAAL;AAAYP,UAAAA,IAAI,EAAE,CAAC,GAAGO,KAAK,CAACP,IAAV,EAAgB;AAAEC,YAAAA,QAAF;AAAYC,YAAAA;AAAZ,WAAhB;AAAlB,SAAD,CAAR;AACA2B,QAAAA,OAAO,CAACC,GAAR,CAAY;AAAEU,UAAAA;AAAF,SAAZ;AACA,eAAOA,QAAP;AACD;AACF,KAPD,CAOE,OAAON,GAAP,EAAY;AACZL,MAAAA,OAAO,CAACC,GAAR,CAAY;AAAEI,QAAAA;AAAF,OAAZ;AACA,aAAOA,GAAP;AACD;AACF,GAfD;;AAiBA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AAAE7B,MAAAA,cAAF;AAAkBC,MAAAA,iBAAlB;AAAqCoB,MAAAA,KAArC;AAA4CS,MAAAA,MAA5C;AAAoDI,MAAAA;AAApD,KADT;AAAA,cAGGnC;AAHH;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CAtFM;;GAAMD,Y;UAGMN,W;;;KAHNM,Y;AAwFb,OAAO,MAAMsC,cAAc,GAAG;AAAA;;AAAA,SAAM/C,UAAU,CAACI,WAAD,CAAhB;AAAA,CAAvB;;IAAM2C,c","sourcesContent":["import { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router\";\r\n\r\nconst AuthContext = createContext();\r\nconst usersDB = {\r\n  data: [\r\n    {\r\n      userName: \"Minhaj\",\r\n      password: \"Hussain\",\r\n    },\r\n    {\r\n      userName: \"Syed\",\r\n      password: \"Minhaj\",\r\n    },\r\n    {\r\n      userName: \"Neog\",\r\n      password: \"Camp\",\r\n    },\r\n    {\r\n      userName: \"Test\",\r\n      password: \"Success\",\r\n    },\r\n  ],\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [isUserLoggedIn, setIsUserLoggedIn] = useState(false);\r\n  const [users, setUsers] = useState(usersDB);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    setUsers(JSON.parse(localStorage.getItem(\"updatedUsers\")) || usersDB);\r\n  }, []);\r\n  useEffect(() => {\r\n    localStorage.setItem(\"updatedUsers\", JSON.stringify(users));\r\n  }, [users]);\r\n\r\n  const findUserByUserName = (userName) =>\r\n    users?.data?.find((user) => user.userName === userName);\r\n\r\n  const fakeFetch = (userName, password) => {\r\n    return new Promise((resolve, reject) => {\r\n      const user = findUserByUserName(userName);\r\n      setTimeout(() => {\r\n        if (user && user.password === password) {\r\n          resolve({ success: true, msg: \"Auth Success\" });\r\n        }\r\n        reject({ success: false, msg: \"wrong username / password\" });\r\n      }, 3000);\r\n    });\r\n  };\r\n\r\n  const login = async (username, password, route) => {\r\n    try {\r\n      const { success } = await fakeFetch(username, password);\r\n\r\n      console.log({ success });\r\n      if (success === true) {\r\n        setIsUserLoggedIn((prev) => !prev);\r\n        localStorage.setItem(\r\n          \"loginStatus\",\r\n          JSON.stringify({ status: true, path: route })\r\n        );\r\n        navigate(route);\r\n      }\r\n      return { success, path: route };\r\n    } catch (err) {\r\n      // console.log({ err });\r\n      return { err };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setIsUserLoggedIn(false);\r\n    localStorage.removeItem(\"loginStatus\");\r\n  };\r\n\r\n  const fetchRegister = (userName) => {\r\n    return new Promise((resolve, reject) => {\r\n      const user = findUserByUserName(userName);\r\n      if (user) {\r\n        reject({ success: false, message: \"username already exists!\" });\r\n      }\r\n      resolve({ success: true, message: \"user added successfully!\" });\r\n    });\r\n  };\r\n\r\n  const register = async (userName, password) => {\r\n    if (userName === \"\" || password === \"\") {\r\n      return { success: false, message: \"Input Fields are enpty!\" };\r\n    }\r\n    try {\r\n      const response = await fetchRegister(userName);\r\n      if (response?.success && userName !== \"\" && password !== \"\") {\r\n        setUsers({ ...users, data: [...users.data, { userName, password }] });\r\n        console.log({ response });\r\n        return response;\r\n      }\r\n    } catch (err) {\r\n      console.log({ err });\r\n      return err;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{ isUserLoggedIn, setIsUserLoggedIn, login, logout, register }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuthContext = () => useContext(AuthContext);\r\n"]},"metadata":{},"sourceType":"module"}